ðŸ”¹ 1. DataTypes in C#

ðŸ‘‰ Data type batata hai ki variable kis type ka data store karega aur kitna memory lega.
C# strongly typed hai â†’ matlab tumhe type declare karna hi hoga.

Categories of Data Types:

1. Value Types (Stack Memory)
	â€¢ Data directly store hota hai.
	â€¢ Fast hote hain.
	â€¢ Example: int, char, float, struct, enum, bool

int num = 100;
bool isAlive = true;
char grade = 'A';
âš¡ Special Value Types
	â€¢ enum (fixed set of constants)
	â€¢ struct (lightweight object, value type)

2. Reference Types (Heap Memory)
	â€¢ Actual data heap me hota hai, variable sirf uska address store karta hai.
	â€¢ Example: class, object, string, arrays, interface

string name = "Suryansh";
int[] marks = {90, 85, 78};

3. Pointer Types (unsafe mode)
ðŸ‘‰ Direct memory address ke saath kaam karte hain. Rarely use hote hain.

âš¡ Interview Q/A
	â€¢ Q: Value type vs Reference type difference?
A: Value type â†’ Stack me store hota hai, copy independent hote hain.
Reference type â†’ Heap me store hota hai, copy reference hota hai.

ðŸ”¹ 2. Type Conversion
ðŸ‘‰ Conversion ka matlab ek data type ko dusre me convert karna.

Types of Conversion:

	1. Implicit Conversion (Type Casting by CLR)
		â—‹ Safe conversion (chhote se bade type).

int a = 10;
double b = a;   // int â†’ double

	2. Explicit Conversion (Type Casting manually)
		â—‹ Jab data loss possible ho.

double d = 9.7;
int i = (int)d;   // i = 9
	3. Helper Methods
		â—‹ Parse() â†’ converts string to primitive (null par error)
		â—‹ Convert class â†’ safe conversion (null = 0 banata hai)

string s = "123";
int x = int.Parse(s);             // string â†’ int
int y = Convert.ToInt32("123");   // safe conversion


âš¡ Interview Q/A
	â€¢ Q: Parse() vs Convert?
A: Parse null handle nahi karta (exception aayegi), Convert null ko default value de deta hai.

ðŸ”¹ 3. Constants
ðŸ‘‰ Constant wo variable jiska value ek bar assign hone ke baad change nahi hota.

const double PI = 3.14;
readonly int myVar; // runtime par assign kar sakte ho

âš¡ Interview Q/A
	â€¢ Q: const aur readonly me difference?
A:
		â—‹ const compile-time fixed hota hai.
		â—‹ readonly runtime me constructor ke andar value assign ho sakta hai.

ðŸ”¹ 4. Date and Time
ðŸ‘‰ C# me DateTime struct use hota hai.

DateTime now = DateTime.Now;       // current time
Console.WriteLine(now.ToString("dd-MM-yyyy"));
Console.WriteLine(now.ToString("HH:mm:ss"));
Specifiers
	â€¢ dd â†’ day
	â€¢ MM â†’ month
	â€¢ yyyy â†’ year
	â€¢ HH â†’ 24 hr
	â€¢ hh â†’ 12 hr

Console.WriteLine(DateTime.Now.ToString("dddd, MMMM dd yyyy"));
âš¡ Interview Q/A
	â€¢ Q: Now vs UtcNow?
A: Now â†’ local machine time, UtcNow â†’ GMT standard time.

ðŸ”¹ 5. Statements

ðŸ‘‰ Program ke basic building blocks.
	â€¢ Declaration Statement â†’ int x;
	â€¢ Expression Statement â†’ x = 10;
	â€¢ Control Flow Statement â†’ loops, if-else, switch
	â€¢ Jump Statement â†’ break, continue, return

ðŸ”¹ 6. Operators

ðŸ‘‰ Special symbols jo calculations perform karte.

Types:

	1. Arithmetic â†’ +, -, *, /, %
	2. Relational â†’ >, <, ==, !=, >=, <=
	3. Logical â†’ &&, ||, !
	4. Assignment â†’ =, +=, -=, *=
	5. Unary â†’ ++, --
	6. Conditional â†’ ? :
	7. Bitwise â†’ &, |, ^, ~, <<, >>

int a = 5, b = 2;
Console.WriteLine(a+b); // 7
Console.WriteLine(a>b); // true
âš¡ Interview Q/A
	â€¢ Q: == vs Equals()?
A: == operator value compare karta hai, Equals() reference content check karta hai.

ðŸ”¹ 7. Decision Making Statements

ðŸ‘‰ Program ko condition ke basis pe control karna.

if

if (marks >= 40) Console.WriteLine("Pass");
if-else

if (age >= 18) Console.WriteLine("Adult");
else Console.WriteLine("Minor");
nested if

if (age > 0) {
   if (age >= 18) Console.WriteLine("Adult");
   else Console.WriteLine("Minor");
}
switch

switch(day) {
    case 1: Console.WriteLine("Mon"); break;
    case 2: Console.WriteLine("Tue"); break;
    default: Console.WriteLine("Invalid");
}

âš¡ Interview Q/A
	â€¢ Q: if-else vs switch difference?
A: if-else â†’ range ya condition ke liye, switch â†’ fixed discrete values ke liye fast.

ðŸ”¹ 8. Loops
ðŸ‘‰ Repetition ke liye use hote hain.

for loop (fixed iteration)

for (int i=1; i<=5; i++)
   Console.WriteLine(i);
while loop (condition based, unknown iterations)

int i=1;
while(i<=5){
   Console.WriteLine(i);
   i++;
}
do-while loop (at least ek bar execute hoga)

int i=1;
do {
   Console.WriteLine(i);
   i++;
} while(i<=5);
foreach loop (collection ke liye)

int[] arr = {1,2,3};
foreach(int n in arr)
   Console.WriteLine(n);

âš¡ Interview Q/A
	â€¢ Q: foreach vs for loop?
A: foreach read-only hai (modify nahi kar sakte), for loop me full control hota hai.

ðŸ”¹ 9. Jump Statements

ðŸ‘‰ Program flow ko control karte hain.

	1. Break

	â€¢ Loop/switch se turant bahar nikalne ke liye.

for(int i=1;i<=5;i++){
    if(i==3) break;
    Console.WriteLine(i);
}
continue
	1st. Current iteration skip, next par jump.

for(int i=1;i<=5;i++){
    if(i==3) continue;
    Console.WriteLine(i);
}
goto
	â€¢ Label par jump karta hai (bad practice).

goto label1;
label1: Console.WriteLine("Jumped");
return
	â€¢ Method terminate kar deta hai aur value return karta hai.

int sum(int a, int b) {
   return a+b;
}

âš¡ Interview Q/A
	â€¢ Q: goto use karna sahi hai?
A: Nahi, kyunki readability aur debugging kharab ho jaati hai.
